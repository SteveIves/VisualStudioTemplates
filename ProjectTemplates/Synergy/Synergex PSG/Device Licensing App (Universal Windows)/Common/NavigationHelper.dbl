import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import System.Windows.Input
import Windows.System
import Windows.UI.Core
import Windows.UI.Xaml
import Windows.UI.Xaml.Controls
import Windows.UI.Xaml.Navigation

.array 0

namespace $safeprojectname$.Common

    ;;;  <summary>
    ;;;  NavigationHelper aids in navigation between pages.  It provides commands used to
    ;;;  navigate back and forward as well as registers for standard mouse and keyboard
    ;;;  shortcuts used to go back and forward in Windows and the hardware back button in
    ;;;  Windows Phone.  In addition it integrates SuspensionManger to handle process lifetime
    ;;;  management and state management when navigating between pages.
    ;;;  </summary>
    ;;;  <example>
    ;;;  To make use of NavigationHelper, follow these two steps or
    ;;;  start with a BasicPage or any other Page item template other than BlankPage.
    ;;;
    ;;;  1) Create an instance of the NavigationHelper somewhere such as in the
    ;;;      constructor for the page and register a callback for the LoadState and
    ;;;      SaveState events.
    ;;;  <code>
    ;;;      public method MyPage
    ;;;      proc
    ;;;          this.InitializeComponent()
    ;;;          var navigationHelper = new NavigationHelper(this)
    ;;;          this.navigationHelper.LoadState += navigationHelper_LoadState
    ;;;          this.navigationHelper.SaveState += navigationHelper_SaveState
    ;;;      endmethod
    ;;;
    ;;;      private async method navigationHelper_LoadState, void
    ;;;          sender, @object
    ;;;          e, @LoadStateEventArgs
    ;;;      proc
    ;;;
    ;;;      endmethod
    ;;;
    ;;;      private async method navigationHelper_SaveState, void
    ;;;          sender, @object
    ;;;          e, @LoadStateEventArgs
    ;;;      proc
    ;;;
    ;;;      endmethod
    ;;;  </code>
    ;;;
    ;;;  2) Register the page to call into the NavigationHelper whenever the page participates
    ;;;      in navigation by overriding the <see cref="Windows.UI.Xaml.Controls.Page.OnNavigatedTo"/>
    ;;;      and <see cref="Windows.UI.Xaml.Controls.Page.OnNavigatedFrom"/> events.
    ;;;  <code>
    ;;;      protected override method OnNavigatedTo, void
    ;;;          e, @NavigationEventArgs
    ;;;      proc
    ;;;          navigationHelper.OnNavigatedTo(e)
    ;;;      endmethod
    ;;;
    ;;;      protected override method OnNavigatedFrom, void
    ;;;          e, @NavigationEventArgs
    ;;;      proc
    ;;;          navigationHelper.OnNavigatedFrom(e)
    ;;;      endmethod
    ;;;  </code>
    ;;;  </example>
    {Windows.Foundation.Metadata.WebHostHidden()}
    public class NavigationHelper extends DependencyObject

        private property Page, @Page
            method get
            endmethod
            method set
            endmethod
        endproperty

        private property Frame, @Frame
            method get
            proc
                mreturn this.Page.Frame
            endmethod
        endproperty

        ;;;  <summary>
        ;;;  Initializes a new instance of the <see cref="NavigationHelper"/> class.
        ;;;  </summary>
        ;;;  <param name="page">A reference to the current page used for navigation.
        ;;;  This reference allows for frame manipulation and to ensure that keyboard
        ;;;  navigation requests only occur when the page is occupying the entire window.</param>
        public method NavigationHelper
            page, @Page
            endparams
        proc
            this.Page = page
            lambda generated_lambda1(sender, e)
            begin
                .ifdef WINDOWS_PHONE_APP
                ;; Windows.Phone.UI.Input.HardwareButtons.BackPressed += HardwareButtons_BackPressed
                .else
                ;;  Keyboard and mouse navigation only apply when occupying the entire window
                if ((this.Page.ActualHeight == Window.Current.Bounds.Height) && (this.Page.ActualWidth == Window.Current.Bounds.Width))
                begin
                    ;; Listen to the window directly so focus isn't required
                    Window.Current.CoreWindow.Dispatcher.AcceleratorKeyActivated += CoreDispatcher_AcceleratorKeyActivated
                    Window.Current.CoreWindow.PointerPressed += this.CoreWindow_PointerPressed
                end
                .endc
            end

            ;;  When this page is part of the visual tree make two changes:
            ;;  1) Map application view state to visual state for the page
            ;;  2) Handle hardware navigation requests
            this.Page.Loaded += generated_lambda1
            lambda generated_lambda2(sender, e)
            begin
                .ifdef WINDOWS_PHONE_APP
                ;; Windows.Phone.UI.Input.HardwareButtons.BackPressed -= HardwareButtons_BackPressed;
                .else
                Window.Current.CoreWindow.Dispatcher.AcceleratorKeyActivated -= CoreDispatcher_AcceleratorKeyActivated
                Window.Current.CoreWindow.PointerPressed -= this.CoreWindow_PointerPressed
                .endc
            end
            ;;  Undo the same changes when the page is no longer visible
            this.Page.Unloaded += generated_lambda2
        endmethod

.region "Navigation support"

        _goBackCommand, @RelayCommand
        _goForwardCommand, @RelayCommand

        ;;;  <summary>
        ;;;  <see cref="RelayCommand"/> used to bind to the back Button's Command property
        ;;;  for navigating to the most recent item in back navigation history, if a Frame
        ;;;  manages its own navigation history.
        ;;;
        ;;;  The <see cref="RelayCommand"/> is set up to use the virtual method <see cref="GoBack"/>
        ;;;  as the Execute Action and <see cref="CanGoBack"/> for CanExecute.
        ;;;  </summary>
        public property GoBackCommand, @RelayCommand
            method get
            proc
                if (_goBackCommand == ^null)
                begin
                    lambda doGoBack()
                    begin
                        mreturn this.GoBack()
                    end
                    lambda doCanGoBack()
                    begin
                        mreturn this.CanGoBack()
                    end
                    _goBackCommand = new RelayCommand(doGoBack, doCanGoBack)
                end
                mreturn _goBackCommand
            endmethod
            method set
            proc
                _goBackCommand = value
            endmethod
        endproperty

        ;;;  <summary>
        ;;;  <see cref="RelayCommand"/> used for navigating to the most recent item in
        ;;;  the forward navigation history, if a Frame manages its own navigation history.
        ;;;
        ;;;  The <see cref="RelayCommand"/> is set up to use the virtual method <see cref="GoForward"/>
        ;;;  as the Execute Action and <see cref="CanGoForward"/> for CanExecute.
        ;;;  </summary>
        public property GoForwardCommand, @RelayCommand
            method get
            proc
                if (_goForwardCommand == ^null)
                begin
                    lambda doGoForward()
                    begin
                        mreturn this.GoForward()
                    end
                    lambda doCanGoForward()
                    begin
                        mreturn this.CanGoForward()
                    end
                    _goForwardCommand = new RelayCommand(doGoForward, doCanGoForward)
                end
                mreturn _goForwardCommand
            endmethod
        endproperty

        ;;;  <summary>
        ;;;  Virtual method used by the <see cref="GoBackCommand"/> property
        ;;;  to determine if the <see cref="Frame"/> can go back.
        ;;;  </summary>
        ;;;  <returns>
        ;;;  true if the <see cref="Frame"/> has at least one entry
        ;;;  in the back navigation history.
        ;;;  </returns>
        public virtual method CanGoBack, boolean
            endparams
        proc
            mreturn (this.Frame != ^null) && this.Frame.CanGoBack
        endmethod

        ;;;  <summary>
        ;;;  Virtual method used by the <see cref="GoForwardCommand"/> property
        ;;;  to determine if the <see cref="Frame"/> can go forward.
        ;;;  </summary>
        ;;;  <returns>
        ;;;  true if the <see cref="Frame"/> has at least one entry
        ;;;  in the forward navigation history.
        ;;;  </returns>
        public virtual method CanGoForward, boolean
            endparams
        proc
            mreturn (this.Frame != ^null) && this.Frame.CanGoForward
        endmethod

        ;;;  <summary>
        ;;;  Virtual method used by the <see cref="GoBackCommand"/> property
        ;;;  to invoke the <see cref="Windows.UI.Xaml.Controls.Frame.GoBack"/> method.
        ;;;  </summary>
        public virtual method GoBack, void
            endparams
        proc
            if ((this.Frame != ^null) && this.Frame.CanGoBack)
                this.Frame.GoBack()
        endmethod

        ;;;  <summary>
        ;;;  Virtual method used by the <see cref="GoForwardCommand"/> property
        ;;;  to invoke the <see cref="Windows.UI.Xaml.Controls.Frame.GoForward"/> method.
        ;;;  </summary>
        public virtual method GoForward, void
            endparams
        proc
            if ((this.Frame != ^null) && this.Frame.CanGoForward)
                this.Frame.GoForward()
        endmethod

.ifdef WINDOWS_PHONE_APP
        ;; ;;; <summary>
        ;; ;;; Invoked when the hardware back button is pressed. For Windows Phone only.
        ;; ;;; </summary>
        ;; ;;; <param name="sender">Instance that triggered the event.</param>
        ;; ;;; <param name="e">Event data describing the conditions that led to the event.</param>
        ;; private method HardwareButtons_BackPressed, void
        ;;     sender, @object
        ;;     e, @Windows.Phone.UI.Input.BackPressedEventArgs
        ;; proc
        ;;     if (this.GoBackCommand.CanExecute(^null))
        ;;     begin
        ;;         e.Handled = true
        ;;         this.GoBackCommand.Execute(^null)
        ;;     end
        ;; endmethod

.else

        ;;;  <summary>
        ;;;  Invoked on every keystroke, including system keys such as Alt key combinations, when
        ;;;  this page is active and occupies the entire window.  Used to detect keyboard navigation
        ;;;  between pages even when the page itself doesn't have focus.
        ;;;  </summary>
        ;;;  <param name="sender">Instance that triggered the event.</param>
        ;;;  <param name="e">Event data describing the conditions that led to the event.</param>
        private method CoreDispatcher_AcceleratorKeyActivated, void
            sender, @CoreDispatcher
            e, @AcceleratorKeyEventArgs
            endparams
        proc
            data virtualKey = e.VirtualKey
            ;;  Only investigate further when Left, Right, or the dedicated Previous or Next keys
            ;;  are pressed
            if (((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown) || (e.EventType == CoreAcceleratorKeyEventType.KeyDown)) && ((((virtualKey == VirtualKey.Left) || (virtualKey == VirtualKey.Right)) || ((int)virtualKey == 166)) || ((int)virtualKey == 167)))
            begin
                data coreWindow = Window.Current.CoreWindow
                data downState = CoreVirtualKeyStates.Down
                data menuKey, boolean, (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState
                data controlKey, boolean, (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState
                data shiftKey, boolean, (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState
                data noModifiers, boolean, (!menuKey && !controlKey) && !shiftKey
                data onlyAlt, boolean, (menuKey && !controlKey) && !shiftKey
                if ((((int)virtualKey == 166) && noModifiers) || ((virtualKey == VirtualKey.Left) && onlyAlt)) then
                begin
                    ;;  When the previous key or Alt+Left are pressed navigate back
                    e.Handled = true
                    this.GoBackCommand.Execute(^null)
                end
                else if ((((int)virtualKey == 167) && noModifiers) || ((virtualKey == VirtualKey.Right) && onlyAlt))
                begin
                    ;;  When the next key or Alt+Right are pressed navigate forward
                    e.Handled = true
                    this.GoForwardCommand.Execute(^null)
                end
            end
        endmethod

        ;;;  <summary>
        ;;;  Invoked on every mouse click, touch screen tap, or equivalent interaction when this
        ;;;  page is active and occupies the entire window.  Used to detect browser-style next and
        ;;;  previous mouse button clicks to navigate between pages.
        ;;;  </summary>
        ;;;  <param name="sender">Instance that triggered the event.</param>
        ;;;  <param name="e">Event data describing the conditions that led to the event.</param>
        private method CoreWindow_PointerPressed, void
            sender, @CoreWindow
            e, @PointerEventArgs
            endparams
        proc
            data properties = e.CurrentPoint.Properties
            ;;  Ignore button chords with the left, right, and middle buttons
            if ((properties.IsLeftButtonPressed || properties.IsRightButtonPressed) || properties.IsMiddleButtonPressed)
                mreturn
            ;;  If back or foward are pressed (but not both) navigate appropriately
            data backPressed, boolean, properties.IsXButton1Pressed
            data forwardPressed, boolean, properties.IsXButton2Pressed
            if (backPressed || forwardPressed)
            begin
                e.Handled = true
                if (backPressed)
                    this.GoBackCommand.Execute(^null)
                if (forwardPressed)
                    this.GoForwardCommand.Execute(^null)
            end
        endmethod

.endc

.endregion

.region "Process lifetime management"

        private _pageKey, String

        ;;;  <summary>
        ;;;  Register this event on the current page to populate the page
        ;;;  with content passed during navigation as well as any saved
        ;;;  state provided when recreating a page from a prior session.
        ;;;  </summary>
        public event LoadState, @LoadStateEventHandler
        ;;;  <summary>
        ;;;  Register this event on the current page to preserve
        ;;;  state associated with the current page in case the
        ;;;  application is suspended or the page is discarded from
        ;;;  the navigaqtion cache.
        ;;;  </summary>
        public event SaveState, @SaveStateEventHandler

        ;;;  <summary>
        ;;;  Invoked when this page is about to be displayed in a Frame.
        ;;;  This method calls <see cref="LoadState"/>, where all page specific
        ;;;  navigation and process lifetime management logic should be placed.
        ;;;  </summary>
        ;;;  <param name="e">Event data that describes how this page was reached.  The Parameter
        ;;;  property provides the group to be displayed.</param>
        public method OnNavigatedTo, void
            e, @NavigationEventArgs
            endparams
        proc
            data frameState = SuspensionManager.SessionStateForFrame(this.Frame)
            this._pageKey = "Page-" + this.Frame.BackStackDepth.ToString()
            if (e.NavigationMode == NavigationMode.New) then
            begin
                ;;  Clear existing state for forward navigation when adding a new page to the
                ;;  navigation stack
                data nextPageKey = this._pageKey
                data nextPageIndex, int, this.Frame.BackStackDepth
                while (frameState.Remove(nextPageKey)) do
                begin
                    ^incr(nextPageIndex, true)
                    nextPageKey = "Page-" + nextPageIndex.ToString()
                end
                ;;  Pass the navigation parameter to the new page
                if (this.LoadState != ^null)
                begin
                    this.LoadState(this, new LoadStateEventArgs(e.Parameter, ^null))
                end
            end
            else
            begin
                ;;  Pass the navigation parameter and preserved page state to the page, using
                ;;  the same strategy for loading suspended state and recreating pages discarded
                ;;  from cache
                if (this.LoadState != ^null)
                begin
                    this.LoadState(this, new LoadStateEventArgs(e.Parameter, (@Dictionary<String, Object>)frameState[this._pageKey]))
                end
            end
        endmethod

        ;;;  <summary>
        ;;;  Invoked when this page will no longer be displayed in a Frame.
        ;;;  This method calls <see cref="SaveState"/>, where all page specific
        ;;;  navigation and process lifetime management logic should be placed.
        ;;;  </summary>
        ;;;  <param name="e">Event data that describes how this page was reached.  The Parameter
        ;;;  property provides the group to be displayed.</param>
        public method OnNavigatedFrom, void
            e, @NavigationEventArgs
            endparams
        proc
            data frameState = SuspensionManager.SessionStateForFrame(this.Frame)
            data pageState = new Dictionary<String, Object>()
            if (this.SaveState != ^null)
            begin
                this.SaveState(this, new SaveStateEventArgs(pageState))
            end
            frameState[_pageKey] = pageState
        endmethod

.endregion
    endclass

    ;;;  <summary>
    ;;;  Represents the method that will handle the <see cref="NavigationHelper.LoadState"/>event
    ;;;  </summary>
    public delegate LoadStateEventHandler, void
        sender, @Object
        e, @LoadStateEventArgs
        endparams
    enddelegate

    ;;;  <summary>
    ;;;  Represents the method that will handle the <see cref="NavigationHelper.SaveState"/>event
    ;;;  </summary>
    public delegate SaveStateEventHandler, void
        sender, @Object
        e, @SaveStateEventArgs
        endparams
    enddelegate

    ;;;  <summary>
    ;;;  Class used to hold the event data required when a page attempts to load state.
    ;;;  </summary>
    public class LoadStateEventArgs extends EventArgs

        ;;;  <summary>
        ;;;  The parameter value passed to <see cref="Frame.Navigate(Type, Object)"/>
        ;;;  when this page was initially requested.
        ;;;  </summary>
        public property NavigationParameter, @Object
            method get
            endmethod
            private method set
            endmethod
        endproperty

        ;;;  <summary>
        ;;;  A dictionary of state preserved by this page during an earlier
        ;;;  session.  This will be null the first time a page is visited.
        ;;;  </summary>
        public property PageState, @Dictionary<string, Object>
            method get
            endmethod
            private method set
            endmethod
        endproperty

        ;;;  <summary>
        ;;;  Initializes a new instance of the <see cref="LoadStateEventArgs"/> class.
        ;;;  </summary>
        ;;;  <param name="navigationParameter">
        ;;;  The parameter value passed to <see cref="Frame.Navigate(Type, Object)"/>
        ;;;  when this page was initially requested.
        ;;;  </param>
        ;;;  <param name="pageState">
        ;;;  A dictionary of state preserved by this page during an earlier
        ;;;  session.  This will be null the first time a page is visited.
        ;;;  </param>
        public method LoadStateEventArgs
            navigationParameter, @Object
            pageState, @Dictionary<string, Object>
            endparams
            parent()
        proc
            this.NavigationParameter = navigationParameter
            this.PageState = pageState
        endmethod

    endclass

    ;;;  <summary>
    ;;;  Class used to hold the event data required when a page attempts to save state.
    ;;;  </summary>
    public class SaveStateEventArgs extends EventArgs

        ;;;  <summary>
        ;;;  An empty dictionary to be populated with serializable state.
        ;;;  </summary>
        public property PageState, @Dictionary<string, Object>
            method get
            endmethod
            private method set
            endmethod
        endproperty

        ;;;  <summary>
        ;;;  Initializes a new instance of the <see cref="SaveStateEventArgs"/> class.
        ;;;  </summary>
        ;;;  <param name="pageState">An empty dictionary to be populated with serializable state.</param>
        public method SaveStateEventArgs
            pageState, @Dictionary<string, Object>
            endparams
            parent()
        proc
            this.PageState = pageState
        endmethod

    endclass

endnamespace

