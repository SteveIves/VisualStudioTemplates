import System
import System.Collections.Generic
import System.IO
import System.Runtime.InteropServices.WindowsRuntime
import Windows.ApplicationModel
import Windows.ApplicationModel.Activation
import Windows.Foundation
import Windows.Foundation.Collections
import Windows.Foundation.Metadata
import Windows.Phone.UI.Input
import Windows.UI.Core
import Windows.UI.Xaml
import Windows.UI.Xaml.Controls
import Windows.UI.Xaml.Controls.Primitives
import Windows.UI.Xaml.Data
import Windows.UI.Xaml.Input
import Windows.UI.Xaml.Media
import Windows.UI.Xaml.Navigation

namespace $safeprojectname$

    ;;; <summary>
    ;;; Provides application-specific behavior to supplement the default Application class.
    ;;; </summary>
    sealed partial class App extends Application

        ;;; <summary>
        ;;; Initializes the singleton application object.  This is the first line of authored code
        ;;; executed, and as such is the logical equivalent of main() or WinMain().
        ;;; </summary>
        public method App
            endparams
        proc
            this.InitializeComponent()
            this.Suspending += OnSuspending
        endmethod

        private static _rootFrame, @Frame, (Frame)Window.Current.Content

        public static property RootFrame, @Frame
            method get
            proc
                mreturn _rootFrame
            endmethod
        endproperty

        ;;; <summary>
        ;;; Invoked when the application is launched normally by the end user.  Other entry points
        ;;; will be used such as when the application is launched to open a specific file.
        ;;; </summary>
        ;;; <param name="e">Details about the launch request and process.</param>
        protected override method OnLaunched, void
            e, @LaunchActivatedEventArgs
            endparams
        proc
            .ifdef DEBUG
            if (System.Diagnostics.Debugger.IsAttached)
            begin
                this.DebugSettings.EnableFrameRateCounter = true;
            end
            .endc

            ;; Do not repeat app initialization when the Window already has content,
            ;; just ensure that the window is active
            if (_rootFrame == ^null)
            begin
                ;; Create a Frame to act as the navigation context and navigate to the first page
                _rootFrame = new Frame()

                _rootFrame.NavigationFailed += OnNavigationFailed

                if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)
                begin
                    ;;TODO: Load state from previously suspended application
                end

                ;; Place the frame in the current Window
                Window.Current.Content = _rootFrame
            end

            if (_rootFrame.Content == ^null)
            begin
                ;; When the navigation stack isn't restored navigate to the first page,
                ;; configuring the new page by passing required information as a navigation
                ;; parameter
                rootFrame.Navigate(^typeof(MainPage), e.Arguments);
            end

            lambda handleBackLambda(sender, args)
            begin
                if (_rootFrame.CanGoBack)
                    _rootFrame.GoBack()
            end
            if (ApiInformation.IsApiContractPresent("Windows.Phone.PhoneContract", 1, 0)) then
            begin
               HardwareButtons.BackPressed += handleBackLambda
            end
            else
            begin
                Windows.UI.Core.SystemNavigationManager.GetForCurrentView().AppViewBackButtonVisibility = AppViewBackButtonVisibility.Visible
                Windows.UI.Core.SystemNavigationManager.GetForCurrentView().BackRequested += handleBackLambda
            end

            ;; Ensure the current window is active
            Window.Current.Activate()

        endmethod

        ;;; <summary>
        ;;; Invoked when Navigation to a certain page fails
        ;;; </summary>
        ;;; <param name="sender">The Frame which failed navigation</param>
        ;;; <param name="e">Details about the navigation failure</param>
        method OnNavigationFailed, void
            sender, @object
            e, @NavigationFailedEventArgs
            endparams
        proc
            throw new Exception("Failed to load Page " + e.SourcePageType.FullName);
        endmethod

        ;;; <summary>
        ;;; Invoked when application execution is being suspended.  Application state is saved
        ;;; without knowing whether the application will be terminated or resumed with the contents
        ;;; of memory still intact.
        ;;; </summary>
        ;;; <param name="sender">The source of the suspend request.</param>
        ;;; <param name="e">Details about the suspend request.</param>
        private method OnSuspending, void
            sender, @object
            e, @SuspendingEventArgs
            endparams
        proc
            data deferral, @SuspendingDeferral, e.SuspendingOperation.GetDeferral()
            ;;TODO: Save application state and stop any background activity
            deferral.Complete()
        endmethod

    endclass

endnamespace