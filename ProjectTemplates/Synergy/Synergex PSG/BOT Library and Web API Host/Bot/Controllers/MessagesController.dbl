
import System
import System.Linq
import System.Net
import System.Net.Http
import System.Threading.Tasks
import System.Web.Http
import System.Web.Http.Description
import Microsoft.Bot.Connector
import Microsoft.Bot.Builder.Dialogs
import Newtonsoft.Json
import $safeprojectname$.Dialogs

.array 0

namespace $safeprojectname$.Controllers

	{BotAuthentication()}
	public class MessagesController extends ApiController

		;;;  <summary>
		;;;  Receive a message from a user and send it to a dialog
		;;;  </summary>
		public async method Post, @Task<HttpResponseMessage>
			{FromBody()}
			message, @Activity

		proc
			if (message.Type == ActivityTypes.Message) then
				await Conversation.SendAsync(message, lambda () { new MessagesDialog() })
			else
				HandleSystemMessage(message)

			mreturn Request.CreateResponse(HttpStatusCode.OK)

		endmethod

		private method HandleSystemMessage, @Activity
			message, @Activity
 
		proc
			using message.Type select
			(ActivityTypes.DeleteUserData),
			begin
				;; Implement user deletion here
				;; If we handle user deletion, return a real message
			end
			(ActivityTypes.ConversationUpdate),
			begin
				;; Handle conversation state changes, like members being added and removed
				;; Use Activity.MembersAdded and Activity.MembersRemoved and Activity.Action for info
				;; Not available in all channels
			end
			(ActivityTypes.ContactRelationUpdate),
			begin
				;; Handle add/remove from contact lists
				;; Activity.From + Activity.Action represent what happened
			end
			(ActivityTypes.Typing),
			begin
				;; Handle knowing that the user is typing
			end
			(ActivityTypes.Ping),
			begin

			end
			endusing

			mreturn ^null

		endmethod

	endclass

endnamespace
